size : 1-5 # definition of an attribute named "size" that can contains every numbers in the range [1,5]. It is of integer type
color : white, red, blue, green, black # definition of an attribute named "color" that can contains any of the words defined after the ':' character. It is of enumeration type
shape : (whatever, # definition of an attribute named "shape" that can contains any of the words defined after the ':' character. In addition, these words have parent-child relation. It is of tree type
			(polygone,
				(triangle,
					(rectangle-triangle),
					(isosceles-triangle,
						(equilateral-triangle)
					)
				),
				(quadrilateral,
					(trapeze),
					(rectangle,
						(square)
					)
				)
			),
			(ellipsoid,
				(circle),
				(ellipse)
			)
		)

# An object can have any amount of attribute, but they must be of one of the following types : integer, enumeration, tree
# In the example file, ALL attributes must be used for EACH objects and the values must match the possible values defined in this file
# The syntax to define an attribute is :
# <attribute-name> : <possible-values>
#
# if the type of the attribute is an integer, you shall use this two possibilities :
#	1) min-max
#		Two numbers separated by a dash. Define a value range [min, max]
#	2) INT
#		If you use the keyword INT, any number that can be represented in a C integer (int) is allowed
#	Spaces or not taken into account
#
# If the type of the attribute is an enumeration, you shall use this definition :
#	value1[, valueN]
#	Spaces or not taken into account. values names can only use alphanumeric values and the characters '-' (dash) and '_' (underscore)
#
# If the type of the attribute is a tree, you shall use this definition :
#	(root, (left-child, (...), (...)), (right-child, (no-children), (only-one-child, the-only-child)))
#	Spaces and line breaks are not taken into account until the last closing parenthesis.
#	Values name can only use alphanumeric values and the characters '-' (dash) and '_' (underscore)
